@page "/PieChart/Count"
@using Application.PieChart.GetCountOfAnyTypes
@using Application.Services
@using ChartJs.Blazor.PieChart
@using Core.Enums
@inject IChartHttpClient<GetCountOfAnyTypesDtoResponse> httpClient;

<PageTitle>Count</PageTitle>

@if (_pieConfig != null)
{
    <Chart Config="_pieConfig"></Chart>
}
else
{
    <div class="text-center fs-1">@Message</div>
}

@code {
    private PieConfig _pieConfig;

    private string Message = "Загрузка...";
    
    protected override async Task OnInitializedAsync()
    {
        var counts = (await httpClient.GetData(TypesOfGraph.Pie)).ToList();

        if (!counts.Any())
        {
            Message = "Данных нет";
        }
        
        ConfigurePieConfig(counts);
    }

    private void ConfigurePieConfig(IEnumerable<GetCountOfAnyTypesDtoResponse> counts)
    {
        _pieConfig = new PieConfig
        {
            Options = new PieOptions()
            {
                Responsive = true,
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = "количество объявлений каждого типа товара"
                }
            }
        };

        foreach (var party in new[] { "Запчасть для радиоуправляемых моделей",
                     "Машинка радиоуправляемая",
                     "Игрушка радиоуправляемая",
                     "Аксессуар для радиоуправляемых моделей"
                 })
        {
            _pieConfig.Data.Labels.Add(party);
        }

        var data = counts
            .OrderBy(c => c.Name)
            .Select(c => c.Count);

        var dataset = new PieDataset<int>(data)
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(145, 63,156),
                ColorUtil.ColorHexString(255,174,173),
                ColorUtil.ColorHexString(165,24,46),
                ColorUtil.ColorHexString(146, 214,234)
            }
        };
        
        _pieConfig.Data.Datasets.Add(dataset);
    }

}